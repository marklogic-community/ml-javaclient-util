plugins {
  id "java"
  id "maven-publish"
  id "eclipse"
  id "idea"
	id "com.jfrog.bintray" version "1.8.4"
	id "com.github.jk1.dependency-license-report" version "1.3"
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
  jcenter()
	mavenCentral()
	maven { url "http://developer.marklogic.com/maven2/" }
}

dependencies {
  compile 'com.marklogic:marklogic-client-api:4.2.0'
  compile 'com.marklogic:marklogic-xcc:9.0.9'
  compile 'org.jdom:jdom2:2.0.6'
  compile 'org.springframework:spring-context:5.1.6.RELEASE'

  testCompile 'junit:junit:4+'
  testCompile 'org.springframework:spring-test:5.1.6.RELEASE'

  // Used for testing loading modules from the classpath
  testRuntime files("lib/modules.jar")

	// Forcing Spring to use logback instead of commons-logging
	testRuntime "ch.qos.logback:logback-classic:1.1.8"
	testRuntime group: "org.slf4j", name: "jcl-over-slf4j", version: "1.7.22"
	testRuntime group: "org.slf4j", name: "slf4j-api", version: "1.7.22"
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier 'sources'
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier "javadoc"
	from file(javadocsDir + "/" + project.name)
}

javadoc.destinationDir = file(javadocsDir + "/" + project.name)
javadoc.failOnError = false

publishing {
  publications {
    mainJava(MavenPublication) {
      from components.java
    }
    sourcesJava(MavenPublication) {
      from components.java
      artifact sourcesJar
    }
	  mavenJavadoc(MavenPublication) {
		  artifact javadocJar
	  }
  }
}

if (project.hasProperty("myBintrayUser")) {
  bintray {
    user = myBintrayUser
    key = myBintrayKey
    publications = ['mainJava', 'sourcesJava']
    pkg {
      repo = 'maven'
      name = project.name
      licenses = ['Apache-2.0']
      vcsUrl = 'https://github.com/rjrudin/' + project.name + '.git'
      version {
        name = project.version
        released = new Date()
      }
    }
  }
}

test {
  testLogging {
    events 'started','passed', 'skipped', 'failed'
    exceptionFormat 'full'
  }
}
